{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SQLGRID \u00b6 \u00a9 2020 Gilbert Brault Browsing SQL Database from Jupyter Notebooks Note SQLGRID is derived from Qgrid work.","title":"About"},{"location":"#sqlgrid","text":"\u00a9 2020 Gilbert Brault Browsing SQL Database from Jupyter Notebooks Note SQLGRID is derived from Qgrid work.","title":"SQLGRID"},{"location":"FeaturesnUsage/","text":"SQLGRID Features and Usage \u00b6 Browsing SQL Database from Jupyter Notebooks Grid layout features \u00b6 Select any table from the database (optional) Use database table column names as headings Show/hide column Resize column width Default setting show the first 20 columns Placing Column by grabbing the heading, dropping where needed Column sorting Ascending Descending Filtering based upon column content Filtering widgets depending upon column data type Date (date range with date Picker) String Number (slider) Boolean Convert column type for ease of filtering from string to date number to string How to setup in a notebook? \u00b6 SQLGRID module brings two objects the user must setup sqlData # The database connection and context. sqlgrid # The UI grid layout and controller. sqlData setup \u00b6 To use an sqlData object, you must first import its definition from the sqlgrid module import sqlgrid from sqlgrid.sqlData import sqlData import ipywidgets as widgets out = widgets . Output ( layout = widgets . Layout ( border = '1px solid black' )) databasePath = ... sql = sqlData ( path = databasePath , out = out ) And then you need to pass The database connection string (Path) a widget output (ipywidgets.Output) where to write any feedback (out) The Path is a SQLAlchemy database Url. See the paragraph Database Urls in the SQLAlchemy documentation (scroll a bit from this top page and go to the paragraph) to learn about the format of those string connexions. If the Jupyter notebook and the database are in the same directory -- for example the chinook database ( chinook.db ) databasePath = \"sqlite:///./chinook.db\" is valid. For more information about sqlData object, after executing the above code, use: help ( sql ) sqlgrid setup \u00b6 the sqlgrid object requires the following variables an sqlData object providing the database connection and context (see above) a grid option object setting main behavior for the grid (see thereafter) tableScan is the option to see the list of all database table and control table selection # create the sqlgrid widget grid = sqlgrid . gridctl ( sql , grid_options = grid_options , tableScan = True ) # display the grid widget in the current cell output grid . _gridctl grid options setup \u00b6 the grid options is a dictionnary with two main set of variables the one controlling the SlickGrid features the other controlling the Qgrid (SQLGRID) features SlickGrid is the javascript and CSS libray controlling the frontend. Please see full documentation here grid_options = { # SlickGrid options 'fullWidthRows' : False , 'syncColumnCellResize' : True , 'forceFitColumns' : True , 'defaultColumnWidth' : 150 , 'rowHeight' : 28 , 'enableColumnReorder' : True , 'enableTextSelectionOnCells' : True , 'editable' : True , 'autoEdit' : False , 'explicitInitialization' : True , 'enableCellNavigation' : True , # Qgrid options 'maxVisibleRows' : 10 , 'minVisibleRows' : 8 , 'sortable' : True , 'filterable' : True , 'highlightSelectedCell' : True , 'highlightSelectedRow' : True } Find thereafter the full set of SlickGrid options according to SlickGrid Wiki Option Default Description asyncEditorLoading false Makes cell editors load asynchronously after a small delay. This greatly increases keyboard navigation speed. asyncEditorLoadDelay 100 Delay after which cell editor is loaded. Ignored unless asyncEditorLoading is true. asyncPostRenderDelay 50 autoEdit true Cell will not automatically go into edit mode when selected. autoHeight false This disables vertical scrolling. cellFlashingCssClass \"flashing\" A CSS class to apply to flashing cells via flashCell(). cellHighlightCssClass \"selected\" A CSS class to apply to cells highlighted via setHighlightedCells(). dataItemColumnValueExtractor null defaultColumnWidth 80 defaultFormatter defaultFormatter The default formatter if no other formatter is specified. See [[custom formatter editable false editCommandHandler queueAndExecuteCommand Not listed as a default under options in slick.grid.js editorFactory null A factory object responsible to creating an editor for a given cell. Must implement getEditor(column). editorLock Slick.GlobalEditorLock A Slick.EditorLock instance to use for controlling concurrent data edits. enableAddRow false If true, a blank row will be displayed at the bottom - typing values in that row will add a new one. Must subscribe to onAddNewRow to save values. enableAsyncPostRender false If true, async post rendering will occur and asyncPostRender delegates on columns will be called. enableCellRangeSelection null WARNING : Not contained in SlickGrid 2.1, may be deprecated enableCellNavigation true Appears to enable cell virtualisation for optimised speed with large datasets enableColumnReorder true enableRowReordering null WARNING : Not contained in SlickGrid 2.1, may be deprecated enableTextSelectionOnCells false explicitInitialization false See:Example: Explicit Initialization forceFitColumns false Force column sizes to fit into the container (preventing horizontal scrolling). Effectively sets column width to be 1/Number of Columns which on small containers may not be desirable forceSyncScrolling false formatterFactory null A factory object responsible to creating a formatter or Custom-Formatter for a given cell. Must implement getFormatter(column). fullWidthRows false Will expand the table row divs to the full width of the container, table cell divs will remain aligned to the left headerRowHeight 25 leaveSpaceForNewRows false multiColumnSort false See:Example: Multi-Column Sort multiSelect true rowHeight 25 selectedCellCssClass \"selected\" showHeaderRow false syncColumnCellResize false If true, the column being resized will change its width as the mouse is dragging the resize handle. If false, the column will resize after mouse drag ends. topPanelHeight 25","title":"Features and Usage"},{"location":"FeaturesnUsage/#sqlgrid_features_and_usage","text":"Browsing SQL Database from Jupyter Notebooks","title":"SQLGRID Features and Usage"},{"location":"FeaturesnUsage/#grid_layout_features","text":"Select any table from the database (optional) Use database table column names as headings Show/hide column Resize column width Default setting show the first 20 columns Placing Column by grabbing the heading, dropping where needed Column sorting Ascending Descending Filtering based upon column content Filtering widgets depending upon column data type Date (date range with date Picker) String Number (slider) Boolean Convert column type for ease of filtering from string to date number to string","title":"Grid layout features"},{"location":"FeaturesnUsage/#how_to_setup_in_a_notebook","text":"SQLGRID module brings two objects the user must setup sqlData # The database connection and context. sqlgrid # The UI grid layout and controller.","title":"How to setup in a notebook?"},{"location":"FeaturesnUsage/#sqldata_setup","text":"To use an sqlData object, you must first import its definition from the sqlgrid module import sqlgrid from sqlgrid.sqlData import sqlData import ipywidgets as widgets out = widgets . Output ( layout = widgets . Layout ( border = '1px solid black' )) databasePath = ... sql = sqlData ( path = databasePath , out = out ) And then you need to pass The database connection string (Path) a widget output (ipywidgets.Output) where to write any feedback (out) The Path is a SQLAlchemy database Url. See the paragraph Database Urls in the SQLAlchemy documentation (scroll a bit from this top page and go to the paragraph) to learn about the format of those string connexions. If the Jupyter notebook and the database are in the same directory -- for example the chinook database ( chinook.db ) databasePath = \"sqlite:///./chinook.db\" is valid. For more information about sqlData object, after executing the above code, use: help ( sql )","title":"sqlData setup"},{"location":"FeaturesnUsage/#sqlgrid_setup","text":"the sqlgrid object requires the following variables an sqlData object providing the database connection and context (see above) a grid option object setting main behavior for the grid (see thereafter) tableScan is the option to see the list of all database table and control table selection # create the sqlgrid widget grid = sqlgrid . gridctl ( sql , grid_options = grid_options , tableScan = True ) # display the grid widget in the current cell output grid . _gridctl","title":"sqlgrid setup"},{"location":"FeaturesnUsage/#grid_options_setup","text":"the grid options is a dictionnary with two main set of variables the one controlling the SlickGrid features the other controlling the Qgrid (SQLGRID) features SlickGrid is the javascript and CSS libray controlling the frontend. Please see full documentation here grid_options = { # SlickGrid options 'fullWidthRows' : False , 'syncColumnCellResize' : True , 'forceFitColumns' : True , 'defaultColumnWidth' : 150 , 'rowHeight' : 28 , 'enableColumnReorder' : True , 'enableTextSelectionOnCells' : True , 'editable' : True , 'autoEdit' : False , 'explicitInitialization' : True , 'enableCellNavigation' : True , # Qgrid options 'maxVisibleRows' : 10 , 'minVisibleRows' : 8 , 'sortable' : True , 'filterable' : True , 'highlightSelectedCell' : True , 'highlightSelectedRow' : True } Find thereafter the full set of SlickGrid options according to SlickGrid Wiki Option Default Description asyncEditorLoading false Makes cell editors load asynchronously after a small delay. This greatly increases keyboard navigation speed. asyncEditorLoadDelay 100 Delay after which cell editor is loaded. Ignored unless asyncEditorLoading is true. asyncPostRenderDelay 50 autoEdit true Cell will not automatically go into edit mode when selected. autoHeight false This disables vertical scrolling. cellFlashingCssClass \"flashing\" A CSS class to apply to flashing cells via flashCell(). cellHighlightCssClass \"selected\" A CSS class to apply to cells highlighted via setHighlightedCells(). dataItemColumnValueExtractor null defaultColumnWidth 80 defaultFormatter defaultFormatter The default formatter if no other formatter is specified. See [[custom formatter editable false editCommandHandler queueAndExecuteCommand Not listed as a default under options in slick.grid.js editorFactory null A factory object responsible to creating an editor for a given cell. Must implement getEditor(column). editorLock Slick.GlobalEditorLock A Slick.EditorLock instance to use for controlling concurrent data edits. enableAddRow false If true, a blank row will be displayed at the bottom - typing values in that row will add a new one. Must subscribe to onAddNewRow to save values. enableAsyncPostRender false If true, async post rendering will occur and asyncPostRender delegates on columns will be called. enableCellRangeSelection null WARNING : Not contained in SlickGrid 2.1, may be deprecated enableCellNavigation true Appears to enable cell virtualisation for optimised speed with large datasets enableColumnReorder true enableRowReordering null WARNING : Not contained in SlickGrid 2.1, may be deprecated enableTextSelectionOnCells false explicitInitialization false See:Example: Explicit Initialization forceFitColumns false Force column sizes to fit into the container (preventing horizontal scrolling). Effectively sets column width to be 1/Number of Columns which on small containers may not be desirable forceSyncScrolling false formatterFactory null A factory object responsible to creating a formatter or Custom-Formatter for a given cell. Must implement getFormatter(column). fullWidthRows false Will expand the table row divs to the full width of the container, table cell divs will remain aligned to the left headerRowHeight 25 leaveSpaceForNewRows false multiColumnSort false See:Example: Multi-Column Sort multiSelect true rowHeight 25 selectedCellCssClass \"selected\" showHeaderRow false syncColumnCellResize false If true, the column being resized will change its width as the mouse is dragging the resize handle. If false, the column will resize after mouse drag ends. topPanelHeight 25","title":"grid options setup"},{"location":"notes/","text":"pip install -e git+https://github.com/jwaschkau/mkpdfs-mkdocs-plugin.git#egg=mkpdfs-mkdocs-plugin https://github.com/comwes/mkpdfs-mkdocs-plugin https://gbrault.github.io/sqlgrid/","title":"Notes"},{"location":"ui/","text":"User Interface with database scan enabled \u00b6 Setup \u00b6 Libraries import sqlgrid from sqlgrid.sqlData import sqlData import ipywidgets as widgets Database connection string databasePath = \"sqlite:///./chinook.db\" Grid options grid_options = { # SlickGrid options 'fullWidthRows' : False , 'syncColumnCellResize' : True , 'forceFitColumns' : True , 'defaultColumnWidth' : 150 , 'rowHeight' : 28 , 'enableColumnReorder' : True , 'enableTextSelectionOnCells' : True , 'editable' : True , 'autoEdit' : False , 'explicitInitialization' : True , 'enableCellNavigation' : True , # Qgrid options 'maxVisibleRows' : 10 , 'minVisibleRows' : 8 , 'sortable' : True , 'filterable' : True , 'highlightSelectedCell' : True , 'highlightSelectedRow' : True } Output Widget (debug information for sqldata proxy) out = widgets . Output ( layout = widgets . Layout ( border = '1px solid black' )) Database proxy object sql1 = sqlData ( path = databasePath , out = out ) Grid database Browser grid1 = sqlgrid . gridctl ( sql1 , grid_options = grid_options , tableScan = True ) \"Initial\" User Interface \u00b6 The python grid1._gridctl object display the status line with four widgets left to right: The triple bar button The reload button The \"data table width\" dropdown The \"database table\" dropdown To select a table, click on the corresponding dropdown and select a new item. If you want to see the first table, you need to select another one and then go back to the first one. Then the \"New Table Select\" user Interface shows-up \"New Table Selected\" User Interface \u00b6 Two grids are showing-up below the Initial user interface 1 st grid is the table column definition a.k.a the \"column\" grid 2 nd grid the first rows of the selected table with at most the 1st 25 columns displayed a.k.a the \"data\" grid Show/Hide the \"column\" grid \u00b6 Use the triple bar button: if \"column\" grid is diplayed, it get hidden else it get displayed Show/Hide columns in the \"data\" grid \u00b6 The \"column\" grid is controlling the \"data\" grid. The user can show/hide columns editing the visible field of any column: double click in the corresponding cell. Then click on the check box. When the check box is set, the colomn is diplayed else it is hidden. Initially, the first 25 column are displayed Change column order \u00b6 To change the column order, for a selected column, click and hold the left mouse button and then drag the column heading to its new location, drop it there. The position column of the \"column grid\" is adjusted accordingly. Change the \"data\" grid width \u00b6 Using the 1 st dropdown, the user can select the \"data\" grid horizontal width.","title":"User Interface"},{"location":"ui/#user_interface_with_database_scan_enabled","text":"","title":"User Interface with database scan enabled"},{"location":"ui/#setup","text":"Libraries import sqlgrid from sqlgrid.sqlData import sqlData import ipywidgets as widgets Database connection string databasePath = \"sqlite:///./chinook.db\" Grid options grid_options = { # SlickGrid options 'fullWidthRows' : False , 'syncColumnCellResize' : True , 'forceFitColumns' : True , 'defaultColumnWidth' : 150 , 'rowHeight' : 28 , 'enableColumnReorder' : True , 'enableTextSelectionOnCells' : True , 'editable' : True , 'autoEdit' : False , 'explicitInitialization' : True , 'enableCellNavigation' : True , # Qgrid options 'maxVisibleRows' : 10 , 'minVisibleRows' : 8 , 'sortable' : True , 'filterable' : True , 'highlightSelectedCell' : True , 'highlightSelectedRow' : True } Output Widget (debug information for sqldata proxy) out = widgets . Output ( layout = widgets . Layout ( border = '1px solid black' )) Database proxy object sql1 = sqlData ( path = databasePath , out = out ) Grid database Browser grid1 = sqlgrid . gridctl ( sql1 , grid_options = grid_options , tableScan = True )","title":"Setup"},{"location":"ui/#initial_user_interface","text":"The python grid1._gridctl object display the status line with four widgets left to right: The triple bar button The reload button The \"data table width\" dropdown The \"database table\" dropdown To select a table, click on the corresponding dropdown and select a new item. If you want to see the first table, you need to select another one and then go back to the first one. Then the \"New Table Select\" user Interface shows-up","title":"\"Initial\" User Interface"},{"location":"ui/#new_table_selected_user_interface","text":"Two grids are showing-up below the Initial user interface 1 st grid is the table column definition a.k.a the \"column\" grid 2 nd grid the first rows of the selected table with at most the 1st 25 columns displayed a.k.a the \"data\" grid","title":"\"New Table Selected\" User Interface"},{"location":"ui/#showhide_the_column_grid","text":"Use the triple bar button: if \"column\" grid is diplayed, it get hidden else it get displayed","title":"Show/Hide the \"column\" grid"},{"location":"ui/#showhide_columns_in_the_data_grid","text":"The \"column\" grid is controlling the \"data\" grid. The user can show/hide columns editing the visible field of any column: double click in the corresponding cell. Then click on the check box. When the check box is set, the colomn is diplayed else it is hidden. Initially, the first 25 column are displayed","title":"Show/Hide columns in the \"data\" grid"},{"location":"ui/#change_column_order","text":"To change the column order, for a selected column, click and hold the left mouse button and then drag the column heading to its new location, drop it there. The position column of the \"column grid\" is adjusted accordingly.","title":"Change column order"},{"location":"ui/#change_the_data_grid_width","text":"Using the 1 st dropdown, the user can select the \"data\" grid horizontal width.","title":"Change the \"data\" grid width"}]}